#summary Tips for backporting

Because Clecko is a fork off a (now) quite old version of Mozilla, despite its functionality  it is still at its roots old brown Mozilla 1.3, which introduces the Biblical problem of new wine and old wineskins. Many patches therefore cannot be applied directly.

=ReCOMtamination=

One nice change in later Mozillas which probably will take a lot of work for Classilla is the gradual removal of COM-based code which infested earlier Mozillas and Netscapes. Until someone gets a lot of time on their hands and goes through the *entire source tree* (not even Mozilla themselves have completed this process, I might add), this is unlikely to happen for Classilla, and so patches done against these "deCOMtaminated" source files will need to be "reCOMtaminated" for Classilla. 

The good news is that for many of these newer simplified functions, there are specific one-to-one mappings for older code, which we'll be adding to this wiki page for the benefit of people working on backports. The functionality is usually there, it just needs to be written out in longhand. This is particularly relevant for layout patches (poop!) where the most work on function cleanup has occurred.

Eventually there will be new functions rolled for these once someone gets a round tuit.

Here are our cheat sheet notes so far:

- There is no equivalent (yet) for `GetPresContext()` -- you need to pass the current `nsIPresContext` into any such functions.

- `GetStateBits()` and `AddStateBits()` should be replaced by manipulating the state bits (usually in `mState`) directly.

- `GetStyleDisplay()` for frames:
{{{
    const nsStyleDisplay *disp;
    frame->GetStyleData(eStyleStruct_Display, (const nsStyleStruct*&)disp);
}}}

- `GetStyleText()` for frames:
{{{
    const nsStyleText* styleText;
    frame->GetStyleData(eStyleStruct_Text, (const nsStyleStruct *&)styleText);
}}}

- `IsEmpty()`

{{{
 // for lines: needs aPresContext and a block frame
      nsCompatibility compat;
      aPresContext->GetCompatibilityMode(&compat);
      const nsStyleText* text;
      ::GetStyleData(block, &text); // clearly within a frame object
      PRBool isPre = NS_STYLE_WHITESPACE_PRE == text->mWhiteSpace ||
                     NS_STYLE_WHITESPACE_MOZ_PRE_WRAP == text->mWhiteSpace;
      PRBool isEmpty;
      line->IsEmpty(compat, isPre, &isEmpty); // line->IsEmpty()
}}}
{{{
 // for frames: needs aPresContext
        nsCompatibility mode;
        aPresContext->GetCompatibilityMode(&mode);
        const nsStyleText* styleText;
        frame->GetStyleData(eStyleStruct_Text,
                                   (const nsStyleStruct *&)styleText);
                                   // firstFrame->GetStyleText()
        PRBool isEmpty;
        frame->IsEmpty(mode, styleText->WhiteSpaceIsSignificant(), &isEmpty);
        // WhiteSpaceIsSignificant is essentially isPre
}}}